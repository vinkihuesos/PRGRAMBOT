from aiogram import Router, types, F, Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from datetime import datetime, timedelta
from utils.db import get_user, update_balance, users_collection
from config import BOT_USERNAME, MAIN_GAME_PHOTO_URL, BOT_USERNAME_TEST

router = Router()

@router.message(F.text == "–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å PR GRAM")
async def earn_prgram_menu(message: types.Message, bot: Bot):
    user_id = message.from_user.id
    user = await get_user(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–æ–Ω—É—Å–æ–≤
    #can_claim_daily, daily_streak = await can_claim_daily_bonus(user_id)
    —Åcan_claim_game_bonus = await can_claim_game_bonus(user_id)
    —Åcan_claim_username_bonus = await can_claim_username_bonus(user_id, message.from_user.username, message.from_user.full_name)
    
    text = f"""
üí∞ *–°–ø–æ—Å–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∫–∞ PR GRAM*

–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∑–∞—Ä–∞–±–æ—Ç–∫–∞:

1. üéØ *–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞*
   - –ü–æ–ª—É—á–∞–π—Ç–µ 1000 PR GRAM –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞
   - üí∞ –î–æ—Ö–æ–¥: 1000 PR GRAM –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞

2. üéÆ *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∏–≥—Ä–æ–≤–æ–π –±–æ–Ω—É—Å*
   - –ü–æ–ª—É—á–∞–π—Ç–µ 2500 PR GRAM –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
   - üéØ –£—Å–ª–æ–≤–∏–µ: —Å—ã–≥—Ä–∞—Ç—å –º–∏–Ω–∏–º—É–º 1 –∏–≥—Ä—É –∑–∞ –¥–µ–Ω—å
   - {'‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ —Å–µ–π—á–∞—Å' if —Åcan_claim_game_bonus else '‚è≥ –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ'}

3. üìù *–ë–æ–Ω—É—Å –∑–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ*
   - –ü–æ–ª—É—á–∞–π—Ç–µ 1500 PR GRAM –æ–¥–∏–Ω —Ä–∞–∑
   - üìå –£—Å–ª–æ–≤–∏–µ: —É–∫–∞–∑–∞—Ç—å –≤ username/–∏–º–µ–Ω–∏/–±–∏–æ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ–µ–∫—Ç
   - {'‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ' if —Åcan_claim_username_bonus else '‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ'}
"""

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéØ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", callback_data="earn_referral")],
        [InlineKeyboardButton(text="üéÆ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∏–≥—Ä–æ–≤–æ–π –±–æ–Ω—É—Å", callback_data="earn_game_bonus")],
        [InlineKeyboardButton(text="üìù –ë–æ–Ω—É—Å –∑–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data="earn_username_bonus")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])

    await bot.send_photo(message.chat.id, MAIN_GAME_PHOTO_URL, caption=text, 
                        reply_markup=keyboard, parse_mode="Markdown")

# 1. –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
@router.callback_query(F.data == "earn_referral")
async def referral_system(callback: types.CallbackQuery, bot: Bot):
    user_id = callback.from_user.id
    referral_link = f"https://t.me/{BOT_USERNAME}?start={user_id}"
    user = await get_user(user_id)
    referrals = user.get("referrals", [])
    count = len(referrals)
    total_earned = count * 1000
    
    text = f"""
üéØ *–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞*

–ü–æ–ª—É—á–∞–π +1000 PR GRAM –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞!

üìé –¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:
`{referral_link}`

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
- –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: {count}
- –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_earned} PR GRAM

üéâ –ü—Ä–∏–≥–ª–∞—à–∞–π –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ —Å–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π, –æ—Ç–ø—Ä–∞–≤–ª—è–π –µ—ë –≤–æ –≤—Å–µ —á–∞—Ç—ã –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π!

üí° *–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:*
1. –î—Ä—É–≥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –ø–æ —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ
2. –ù–∞—á–∏–Ω–∞–µ—Ç –∏–≥—Ä–∞—Ç—å –≤ –±–æ—Ç–µ
3. –¢—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞–µ—à—å 1000 PR GRAM
"""

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π", 
                            url=f"https://t.me/share/url?url={referral_link}&text=–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è%20–∫%20–∏–≥—Ä–µ!")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="earn_menu")]
    ])

    await callback.message.edit_caption(caption=text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

# 2. –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∏–≥—Ä–æ–≤–æ–π –±–æ–Ω—É—Å
async def can_claim_game_bonus(user_id: int):
    user = await get_user(user_id)
    if not user:
        return False
    
    last_game_bonus = user.get("last_game_bonus")
    games_today = user.get("games_today", 0)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ 24 —á–∞—Å–∞
    if last_game_bonus:
        last_time = last_game_bonus.replace(tzinfo=None) if last_game_bonus.tzinfo else last_game_bonus
        if datetime.now() - last_time < timedelta(hours=24):
            return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—ã–≥—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∏–≥—Ä—É —Å–µ–≥–æ–¥–Ω—è
    return games_today > 0

@router.callback_query(F.data == "earn_game_bonus")
async def game_bonus(callback: types.CallbackQuery, bot: Bot):
    user_id = callback.from_user.id
    can_claim = await can_claim_game_bonus(user_id)
    user = await get_user(user_id)
    games_today = user.get("games_today", 0)
    
    if can_claim:
        text = f"""
üéÆ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∏–≥—Ä–æ–≤–æ–π –±–æ–Ω—É—Å</b>

‚úÖ –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å 2500 PR GRAM!

üéØ <b>–£—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã:</b>
- –°—ã–≥—Ä–∞–Ω–æ –∏–≥—Ä —Å–µ–≥–æ–¥–Ω—è: {games_today}
- –ü—Ä–æ—à–ª–æ –±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è

üí∞ <b>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å!</b>
"""
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üéÅ –ü–æ–ª—É—á–∏—Ç—å 2500 PR GRAM", callback_data="claim_game_bonus")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="earn_menu")]
        ])
    else:
        next_bonus_time = await get_next_bonus_time(user.get('last_game_bonus'))
        text = f"""
üéÆ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∏–≥—Ä–æ–≤–æ–π –±–æ–Ω—É—Å</b>

‚ùå –ë–æ–Ω—É—Å –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω

üéØ <b>–£—Å–ª–æ–≤–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è:</b>
- –°—ã–≥—Ä–∞—Ç—å –º–∏–Ω–∏–º—É–º 1 –∏–≥—Ä—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è
- –ü—Ä–æ—à–ª–æ 24 —á–∞—Å–∞ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è

üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
- –°—ã–≥—Ä–∞–Ω–æ –∏–≥—Ä —Å–µ–≥–æ–¥–Ω—è: {games_today}
- –°–ª–µ–¥—É—é—â–∏–π –±–æ–Ω—É—Å: —á–µ—Ä–µ–∑ {next_bonus_time}

üí° –°—ã–≥—Ä–∞–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∏–≥—Ä—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞ –±–æ–Ω—É—Å–æ–º!
"""
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üé≤ –°—ã–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—É", callback_data="emoji_game")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="earn_menu")]
        ])

    await callback.message.edit_caption(caption=text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

@router.callback_query(F.data == "claim_game_bonus")
async def claim_game_bonus(callback: types.CallbackQuery, bot: Bot):
    user_id = callback.from_user.id
    if await can_claim_game_bonus(user_id):
        await update_balance(user_id, 2500)
        await users_collection.update_one(
            {"user_id": user_id},
            {"$set": {"last_game_bonus": datetime.now()}}
        )
        
        user = await get_user(user_id)
        text = f"""
üéÆ *–ë–æ–Ω—É—Å –ø–æ–ª—É—á–µ–Ω!*

‚úÖ –í—ã –ø–æ–ª—É—á–∏–ª–∏ 2500 PR GRAM!

üí∞ –¢–µ–ø–µ—Ä—å –Ω–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ: {user['balance']:,} PR GRAM

üéØ –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞ –ø–æ—Å–ª–µ –∏–≥—Ä—ã –∑–∞ –Ω–æ–≤—ã–º –±–æ–Ω—É—Å–æ–º!
"""
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üé≤ –°—ã–≥—Ä–∞—Ç—å –µ—â–µ", callback_data="emoji_game")],
            [InlineKeyboardButton(text="üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –µ—â–µ", callback_data="earn_menu")]
        ])
    else:
        text = "‚ùå –ë–æ–Ω—É—Å –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –£—Å–ª–æ–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã."
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="earn_game_bonus")]
        ])
    
    await callback.message.edit_caption(caption=text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

# 3. –ë–æ–Ω—É—Å –∑–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ
async def can_claim_username_bonus(user_id: int, username: str, full_name: str):
    user = await get_user(user_id)
    if user and user.get("claimed_username_bonus"):
        return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ username –∏–ª–∏ –∏–º–µ–Ω–∏
    project_keywords = ["PENGUGRAM", "PENGU_GRAM", "PENGU-GRAM", "PENGU GRAM", BOT_USERNAME.lower()]
    
    user_text = f"{username or ''} {full_name or ''}".lower()
    
    for keyword in project_keywords:
        if keyword.lower() in user_text:
            return True
    
    return False

@router.callback_query(F.data == "earn_username_bonus")
async def username_bonus(callback: types.CallbackQuery, bot: Bot):
    user_id = callback.from_user.id
    user = await get_user(user_id)
    can_claim = await can_claim_username_bonus(user_id, callback.from_user.username, callback.from_user.full_name)
    if user['claimed_username_bonus'] is True:
        text = "‚ùå –í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –±–æ–Ω—É—Å –∑–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –Ω–∏–∫–µ"
        await callback.message.edit_caption(caption=text, parse_mode="Markdown")
        return
    if can_claim:
        text = f"""
üìù *–ë–æ–Ω—É—Å –∑–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ*

‚úÖ –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å 1500 PR GRAM!

üéØ –£—Å–ª–æ–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: –≤ –≤–∞—à–µ–º username/–∏–º–µ–Ω–∏ –µ—Å—Ç—å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞

üí∞ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å!
"""
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üéÅ –ü–æ–ª—É—á–∏—Ç—å 1500 PR GRAM", callback_data="claim_username_bonus")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="earn_menu")]
        ])
    else:
        text = f"""
üìù *–ë–æ–Ω—É—Å –∑–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ*

‚ùå –ë–æ–Ω—É—Å –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω

üéØ –£—Å–ª–æ–≤–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è:
–î–æ–±–∞–≤—å—Ç–µ –≤ –≤–∞—à username –∏–ª–∏ –∏–º—è —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:
- PENGUGRAM
- PENGU_GRAM 
- PENGU-GRAM
- PENGU GRAM
- {BOT_USERNAME}

üí° –ü—Ä–∏–º–µ—Ä –Ω–∏–∫–∞: `–¥–∂–æ–Ω_PRGRAM` –∏–ª–∏ `PRGRAM_–∞–ª–µ–∫—Å`

üí∞ –ü–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∏–∫–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏!
"""
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data="earn_username_bonus")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="earn_menu")]
        ])

    await callback.message.edit_caption(caption=text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

@router.callback_query(F.data == "claim_username_bonus")
async def claim_username_bonus(callback: types.CallbackQuery, bot: Bot):
    user_id = callback.from_user.id
    if await can_claim_username_bonus(user_id, callback.from_user.username, callback.from_user.full_name):
        await update_balance(user_id, 1500)
        await users_collection.update_one(
            {"user_id": user_id},
            {"$set": {"claimed_username_bonus": True}}
        )
        
        user = await get_user(user_id)
        text = f"""
üìù *–ë–æ–Ω—É—Å –ø–æ–ª—É—á–µ–Ω!*

‚úÖ –í—ã –ø–æ–ª—É—á–∏–ª–∏ 1500 PR GRAM!

üí∞ –¢–µ–ø–µ—Ä—å –Ω–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ: {user['balance']:,} PR GRAM

üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø—Ä–æ–µ–∫—Ç–∞!
"""
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üé≤ –ù–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å", callback_data="emoji_game")],
            [InlineKeyboardButton(text="üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –µ—â–µ", callback_data="earn_menu")]
        ])
    else:
        text = "‚ùå –£—Å–ª–æ–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã. –î–æ–±–∞–≤—å—Ç–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –≤ username/–∏–º—è."
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data="earn_username_bonus")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="earn_menu")]
        ])
    
    await callback.message.edit_caption(caption=text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def get_next_bonus_time(last_bonus_time):
    if not last_bonus_time:
        return "—Å–µ–π—á–∞—Å"
    
    next_time = last_bonus_time + timedelta(hours=24)
    time_left = next_time - datetime.now()
    
    if time_left.total_seconds() <= 0:
        return "—Å–µ–π—á–∞—Å"
    
    hours = int(time_left.total_seconds() // 3600)
    minutes = int((time_left.total_seconds() % 3600) // 60)
    
    return f"{hours}—á {minutes}–º"

@router.callback_query(F.data == "earn_menu")
async def back_to_earn_menu(callback: types.CallbackQuery, bot: Bot):
    await earn_prgram_menu(callback.message, bot)
    await callback.answer()


