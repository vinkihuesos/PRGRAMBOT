
from aiogram import Router, types, Bot, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from utils.db import get_user, get_balance, update_balance, remove_balance
import re

router = Router()
ADMINS_LIST = [717997178, 5938187650, 7512492677]  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ —á–µ–∫
class DepositState(StatesGroup):
    waiting_for_amount = State()
    waiting_for_receipt = State()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞
class WithdrawState(StatesGroup):
    amount = State()
    username = State()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ–∫–∞
class AdminCheckState(StatesGroup):
    waiting_for_comment = State()

user_selected_game = {}
user_selected_count = {}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"
@router.callback_query(F.data == "dep")
async def deposit(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üí∞ –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:")
    await state.set_state(DepositState.waiting_for_amount)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@router.message(DepositState.waiting_for_amount)
async def process_deposit_amount(message: Message, state: FSMContext):
    if not message.text.isdigit() or int(message.text) > 1000000 or int(message.text) < 10000:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–æ—Ç 10000 –¥–æ 100000 PR GRAM ).")
        return

    amount = int(message.text)
    await state.update_data(amount=amount)
    await message.answer(f"üí≥ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {amount} PR GRAM \n\nüìé –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —á–µ–∫ (https://...)")
    await state.set_state(DepositState.waiting_for_receipt)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Å—ã–ª–∫–∏ –Ω–∞ —á–µ–∫
@router.message(DepositState.waiting_for_receipt)
async def process_deposit_receipt(message: Message, state: FSMContext, bot: Bot):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω–∞—è HTTPS —Å—Å—ã–ª–∫–∞
    url_pattern = r'^https://[^\s/$.?#].[^\s]*$'
    if not re.match(url_pattern, message.text):
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é HTTPS —Å—Å—ã–ª–∫—É –Ω–∞ —á–µ–∫.")
        return

    receipt_url = message.text
    user_data = await state.get_data()
    amount = user_data.get("amount")
    user_id = message.from_user.id
    username = message.from_user.username or "–ù–µ—Ç username"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω–∞
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve_dep_{user_id}_{amount}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_dep_{user_id}")
        ]
    ])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
    for admin_id in ADMINS_LIST:
        try:
            await bot.send_message(
                admin_id,
                f"üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ!\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} (ID: {user_id})\n"
                f"üí∞ –°—É–º–º–∞: {amount} PR GRAM \n"
                f"üìé –ß–µ–∫: {receipt_url}",
                reply_markup=keyboard
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

    await message.answer("‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏.")
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–º
@router.callback_query(F.data.startswith("approve_dep_"))
async def approve_deposit(callback: CallbackQuery, bot: Bot):
    data_parts = callback.data.split("_")
    user_id = int(data_parts[2])
    amount = int(data_parts[3])
    
    # –ü–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await update_balance(user_id, amount)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await bot.send_message(
            user_id,
            f"‚úÖ –í–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–∞ {amount} PR GRAM  —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É!\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω."
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
    await callback.message.edit_text(
        f"‚úÖ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n"
        f"üí∞ –°—É–º–º–∞: {amount} PR GRAM \n"
        f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω"
    )
    await callback.answer("–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–º
@router.callback_query(F.data.startswith("reject_dep_"))
async def reject_deposit(callback: CallbackQuery, state: FSMContext):
    user_id = int(callback.data.split("_")[2])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    await state.update_data(reject_user_id=user_id, action_type="reject_deposit")
    await state.set_state(AdminCheckState.waiting_for_comment)
    
    await callback.message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —á–µ–∫–∞:\n"
        "(–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ -)"
    )
    await callback.answer()

@router.callback_query(F.data == "with")
async def ask_withdraw_amount(callback: CallbackQuery, state: FSMContext):
    user = await get_user(callback.from_user.id)
    
    await callback.message.answer(
        f"üí≥ *–í—ã–≤–æ–¥ PR GRAM*\n\n"
        f"‚Ä¢ –ú–∏–Ω–∏–º—É–º: *10,000 PR GRAM*\n"
        f"üí∞ *–í–∞—à –±–∞–ª–∞–Ω—Å:* {user['balance']} PR GRAM\n\n"
        f"‚ÑπÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:",
        parse_mode='Markdown'
    )
    await state.set_state(WithdrawState.amount)
    await callback.answer()

@router.message(WithdrawState.amount)
async def ask_withdraw_username(message: Message, state: FSMContext):
    user = await get_user(message.chat.id)

    if not message.text.isdigit() or int(message.text) < 10000 or int(message.text) > user['balance']:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –≤—ã–≤–æ–¥–∞ (–º–∏–Ω. 10,000 PR GRAM).")
        return
    
    await state.update_data(amount=message.text)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —é–∑–µ—Ä–Ω–µ–π–º –¥–ª—è –≤—ã–≤–æ–¥–∞ PR GRAM (–Ω–∞–ø—Ä–∏–º–µ—Ä: @username):")
    await state.set_state(WithdrawState.username)

@router.message(WithdrawState.username)
async def confirm_withdraw(message: Message, state: FSMContext, bot: Bot):
    username = message.text.strip()
    if not username.startswith('@'):
        username = '@' + username
    
    user_data = await state.get_data()
    amount = user_data.get("amount")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
    await state.update_data(amount=amount)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–≤–æ–¥", callback_data=f"approve_with_{message.chat.id}_{amount}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –≤—ã–≤–æ–¥", callback_data=f"reject_with_{message.chat.id}_{amount}")
        ],
        [InlineKeyboardButton(text="‚úèÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data=f"comment_with_{message.chat.id}")]
    ])

    for admin in ADMINS_LIST:
        await bot.send_message(
            admin,
            f"üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ PR GRAM!\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username or '–Ω–µ—Ç username'}\n"
            f"üí∞ –°—É–º–º–∞: {amount} PR GRAM\n"
            f"üìù –Æ–∑–µ—Ä–Ω–µ–π–º –¥–ª—è –≤—ã–≤–æ–¥–∞: {username}\n"
            f"üÜî ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.chat.id}",
            reply_markup=keyboard
        )

    await message.answer(f"""
üü¢ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, –æ–∂–∏–¥–∞–π—Ç–µ o–±—Äa–±o—Ç–∫–∏üîÑ

üí∞ –°—É–º–ºa: {amount} PR GRAM

‚ùóÔ∏è –°–øa–º –≤ —Å—Ço—Äo–Ω—É a–¥–º–∏–Ω–∏—Å—Ç—Äa—Ü–∏–∏ - –∑a–¥e—Ä–∂–∏—Ç –ía—à –≤—ã–≤o–¥ –¥o 24 —áa—Åo–≤!""")
    await remove_balance(message.chat.id, int(amount))
    await state.clear()

@router.callback_query(F.data.startswith("approve_with_"))
async def approve_withdraw(callback: CallbackQuery, bot: Bot):
    data_parts = callback.data.split("_")
    user_id = int(data_parts[2])
    amount = data_parts[3]
    
    await bot.send_message(user_id, f"‚úÖ –í–∞—à –≤—ã–≤–æ–¥ {amount} PR GRAM –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!")
    user = await bot.get_chat(user_id)
    await callback.message.edit_text(f"‚úÖ –í—ã–≤–æ–¥ {amount}\n–î–ª—è ID: @{user.username} || {user_id}\n\n–û–¥–æ–±—Ä–µ–Ω")
    await callback.answer()

@router.callback_query(F.data.startswith("reject_with_"))
async def reject_withdraw(callback: CallbackQuery, state: FSMContext):
    data_parts = callback.data.split("_")
    user_id = int(data_parts[2])
    amount = data_parts[3]
    
    await state.update_data(
        reject_user_id=user_id,
        amount=amount,
        action_type="reject_withdraw"
    )
    await state.set_state(AdminCheckState.waiting_for_comment)
    
    await callback.message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞:\n"
        "(–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ -)"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("comment_with_"))
async def ask_for_comment(callback: CallbackQuery, state: FSMContext):
    user_id = int(callback.data.split("_")[2])

    await state.update_data(
        comment_user_id=user_id,
        action_type="comment_withdraw"
    )
    await state.set_state(AdminCheckState.waiting_for_comment)
    
    await callback.message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
        "(–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ -)"
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
@router.message(AdminCheckState.waiting_for_comment)
async def handle_comment(message: Message, state: FSMContext, bot: Bot):
    comment = message.text
    user_data = await state.get_data()
    action_type = user_data.get("action_type")
    
    if comment == '-':
        await state.clear()
        await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return
    
    if action_type == "reject_deposit":
        user_id = user_data.get("reject_user_id")
        if user_id:
            try:
                await bot.send_message(
                    user_id,
                    f"‚ùå –í–∞—à —á–µ–∫ –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n"
                    f"üìù –ü—Ä–∏—á–∏–Ω–∞: {comment}\n\n"
                    f"‚ÑπÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
                    f"‚Ä¢ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ —á–µ–∫\n"
                    f"‚Ä¢ –ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å —á–µ–∫–∞\n"
                    f"‚Ä¢ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—É–º–º—ã\n"
                    f"‚Ä¢ –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å —á–µ–∫–∞"
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            
            await message.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ —á–µ–∫–∞.")
    
    elif action_type == "reject_withdraw":
        user_id = user_data.get("reject_user_id")
        amount = user_data.get("amount")
        if user_id and amount:
            try:
                await bot.send_message(
                    user_id,
                    f"‚ùå –í–∞—à –≤—ã–≤–æ–¥ –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n"
                    f"üìù –ü—Ä–∏—á–∏–Ω–∞: {comment}\n\n"
                    f"üí∞ –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å."
                )
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å
                await update_balance(user_id, int(amount))
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            
            await message.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –≤—ã–≤–æ–¥–∞.")
    
    elif action_type == "comment_withdraw":
        user_id = user_data.get("comment_user_id")
        if user_id:
            try:
                await bot.send_message(
                    user_id,
                    f"üí¨ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Å—Ç–∞–≤–∏–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –≤–∞—à–µ–º—É –≤—ã–≤–æ–¥—É:\n\n{comment}"
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            
            await message.answer("‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    
    await state.clear()