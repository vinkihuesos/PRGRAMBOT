from motor.motor_asyncio import AsyncIOMotorClient
from datetime import datetime
from typing import Optional, Dict, Any, List
from aiogram import Bot



MONGO_URI = "mongodb+srv://sladk1y:zxcasdqwe@cas.s1v4j.mongodb.net/"
DB_NAME = "RandomlyGift"
# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
client = AsyncIOMotorClient(MONGO_URI)
db = client[DB_NAME]
users_collection = db["users"]
emoji_games_collection = db["emoji_games"]

# –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
async def add_user(user_id: int, referrer_id: Optional[int] = None) -> Dict[str, Any]:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É, –µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç."""
    user = await get_user(user_id)
    if user:
        return user
    
    new_user = {
        "user_id": user_id,
        "balance": 0,
        "registration_date": datetime.utcnow(),
        "games": [],
        "is_played": False,
        "game_stats": [0, 0, 0],
        "referrer_id": referrer_id,
        "referrals": [],
        "referral_confirmed": False,
        "last_daily_bonus": None,
        "daily_streak": 0,
        "last_game_bonus": None,
        "games_today": 0,
        "last_game_date": None,
        "claimed_username_bonus": False
    }
    await users_collection.insert_one(new_user)
    return new_user

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä
async def update_game_stat(user_id: int, index: int) -> None:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä: index=0 (–ø–æ–±–µ–¥–∞), index=1 (–ø–æ—Ä–∞–∂–µ–Ω–∏–µ), index=2 (–Ω–∏—á—å—è)."""
    if index in {0, 1, 2}:
        await users_collection.update_one({"user_id": user_id}, {"$inc": {f"game_stats.{index}": 1}})

async def add_win(user_id: int) -> None:
    await update_game_stat(user_id, 0)

async def add_loss(user_id: int) -> None:
    await update_game_stat(user_id, 1)

async def add_dwaw(user_id: int) -> None:
    await update_game_stat(user_id, 2)

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def get_user(user_id: int) -> Optional[Dict[str, Any]]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ user_id –∏–ª–∏ None, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç."""
    return await users_collection.find_one({"user_id": user_id})

# –§—É–Ω–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
async def update_balance(user_id: int, amount: int) -> None:
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å—É–º–º—É –∫ –±–∞–ª–∞–Ω—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    await users_collection.update_one({"user_id": user_id}, {"$inc": {"balance": amount}})

async def remove_balance(user_id: int, amount: int) -> None:
    """–í—ã—á–∏—Ç–∞–µ—Ç —Å—É–º–º—É –∏–∑ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    await update_balance(user_id, -amount)

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
async def get_balance(user_id: int) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ 0, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç."""
    user = await users_collection.find_one({"user_id": user_id}, {"balance": 1})
    return user.get("balance", 0) if user else 0

# –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∫–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
async def add_new_param(param: str, value: Any) -> None:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    await users_collection.update_many({}, {'$set': {param: value}})

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
async def process_referral(user_id: int, referrer_id: int, bot: Bot) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É: –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ."""
    user = await get_user(user_id)
    if not user or user.get("referral_confirmed", False):
        return

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    await users_collection.update_one({"user_id": user_id}, {"$set": {"referral_confirmed": True}})
    await users_collection.update_one({"user_id": referrer_id}, {"$push": {"referrals": user_id}})

    # –ü–æ–ª—É—á–∞–µ–º username –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        new_user = await bot.get_chat(user_id)
        username = f"@{new_user.username}" if new_user.username else f"ID: {user_id}"
        referrer_username = await bot.get_chat(referrer_id)
    except Exception as e:
        username = f"ID: {user_id}"
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –æ –Ω–æ–≤–æ–º –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    try:
        await update_balance(referrer_id, 1000)
        referrer = await get_user(referrer_id)
        new_mem = await get_user(user_id)
        await bot.send_message(referrer_id, f"üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ!\nüí∞–í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏: +1000 PR GRAM Ô∏è\nüëõ–í–∞—à –±–∞–ª–∞–Ω—Å: {referrer['balance']} PR GRAM ")
        await bot.send_message(user_id, f"üéâ –í—ã –ø–µ—Ä–µ—à–ª–∏ –ø–æ —Å—Å—ã–ª–∫–µ {referrer_username.username}\nüí∞–í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏: +1000 PR GRAM Ô∏è\nüëõ–í–∞—à –±–∞–ª–∞–Ω—Å: {new_mem['balance']} PR GRAM ")
        
    except Exception:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–µ–Ω—É–ª–µ–≤—ã–º –±–∞–ª–∞–Ω—Å–æ–º
async def get_all_users_ids() -> List[Dict[str, Any]]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –±–∞–ª–∞–Ω—Å –±–æ–ª—å—à–µ 0."""
    return [user async for user in users_collection.find({"balance": {"$gt": 0}}, {"user_id": 1, "balance": 1})]

async def increment_games_today(user_id: int):
    today = datetime.now().date()
    user = await get_user(user_id)
    
    last_game_date = user.get("last_game_date")
    if last_game_date and last_game_date.date() == today:
        # –£–∂–µ –∏–≥—Ä–∞–ª —Å–µ–≥–æ–¥–Ω—è - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
        await users_collection.update_one(
            {"user_id": user_id},
            {"$inc": {"games_today": 1}}
        )
    else:
        # –ü–µ—Ä–≤–∞—è –∏–≥—Ä–∞ —Å–µ–≥–æ–¥–Ω—è - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
        await users_collection.update_one(
            {"user_id": user_id},
            {"$set": {"games_today": 1, "last_game_date": datetime.now()}}
        )

# async def add_missing_bonus_fields():
#     """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è –¥–ª—è –±–æ–Ω—É—Å–æ–≤ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
#     from datetime import datetime
    
#     # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#     await users_collection.update_many(
#         {},  # –í—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
#         {
#             "$set": {
#                 "last_daily_bonus": None,
#                 "daily_streak": 0,
#                 "last_game_bonus": None,
#                 "games_today": 0,
#                 "last_game_date": None,
#                 "claimed_username_bonus": False
#             }
#         },
#         upsert=False  # –ù–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã, —Ç–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª—è—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ
#     )
#     print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è –¥–ª—è –±–æ–Ω—É—Å–æ–≤")

# # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–¥–∏–Ω —Ä–∞–∑
# import asyncio
# asyncio.run(add_missing_bonus_fields())